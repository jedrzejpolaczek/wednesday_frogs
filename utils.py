import os
import json
from datetime import datetime
from xmlrpc.client import Boolean
import argparse

import tensorflow
from loguru import logger

from model.dcgan.networks.generator import create_generator


def get_args() -> list:
    """ 
    Get args from command line using argparse library. 
    
    return (list): list of args passed from command line.
    """
    parser = argparse.ArgumentParser(description='Process Wednesday frogs arguments.') 

    parser.add_argument('--run', type=str, help='\You can choose type of run bewteen \
        train for training the model, \
            email for generate and email frog image or \
                discord for run discord bot.')
    parser.add_argument('--log_level', type=str, default="INFO", help='Level of logs to be displayed.')

    return parser.parse_args()


def get_json_data(file_path: str) -> dict:
    """ 
    Read JSON dict from file.

    file_path (str): path to JSON file.
    
    return (dict): dict based on read JSON file.
    """
    logger.debug(f"Opening JSON file: {file_path}")
    json_file = open(file_path, encoding="utf8")
    
    logger.debug("Loading JSON object as a dictionary.")
    data = json.load(json_file)

    return data


def generate_images(
    model: tensorflow.keras.Model, 
    seed: tensorflow.Tensor, 
    json_path: str="training_config.json"
) -> tensorflow.Tensor:
    """
    Generate and return tensor with images generated by generator network.

    model (tensorflow.keras.Model): model of generator.
    seed (tensorflow.Tensor): tensor with random values.
    json_path (str): path to JSON file with configuration.

    return (tensorflow.Tensor): generated images in form of Tensor. 
    Image with the highest probability to be correct is first, with the lowest, last in the Tensor.
    """
    # Notice `training` is set to False.
    # This is so all layers run in inference mode (batchnorm).
    seed = get_seed(json_path)
    predictited_images = model(seed, training=False)

    return predictited_images


def get_seed(json_path: str="training_config.json") -> tensorflow.Tensor:
    """
    Generate and return seed used to generate images.

    json_path (str): path to JSON file with configuration.

    return (tensorflow.Tensor): tensor with random values with examples_to_generate values with dimensions (noise_dim,).
    """
    model_data = get_json_data(json_path)

    noise_dim = model_data["noise_dim"]
    examples_to_generate = model_data["examples_to_generate"]
    
    seed = tensorflow.random.normal([examples_to_generate, noise_dim])

    return seed


def save_image(save_dir: str, name: str, images: tensorflow.Tensor):
    """ 
    Save image under pointed directory.
    
    save_dir (str): directory where image need to be stored.
    name (str): name under image should be stored.
    images (tensorflow.Tensor): tensor of images from where we will save first image. 
    First image have the highest probability to be correct.
    """
    img = tensorflow.keras.utils.array_to_img(images[0] * 255., scale=False)
    img.save(os.path.join(save_dir, f'{name}'))


def is_it_wednesday() -> Boolean:
    """ 
    Check if it is Wednesday.
    
    return boolean: True if it is, false if not.
    """
    # If today is Wednesday (0 = Mon, 1 = Tue, 2 = Wen ...)
    is_it_wednesday = datetime.today().weekday() == 2
    logger.debug("Is it Wednesdat? : " + str(is_it_wednesday))
    
    return is_it_wednesday


def load_model(json_path: str="training_config.json") -> tensorflow.keras.Model:
    """
    Load network from .h5 file and return model object.

    json_path (str): path to JSON file with configuration.

    return (tensorflow.keras.Model): generator model.
    """
    model_data = get_json_data(json_path)

    logger.debug("Load model.")
    model_save_dir = model_data["model_save_dir"]
    generator = tensorflow.keras.models.load_model(f"{model_save_dir}.h5")

    return generator
