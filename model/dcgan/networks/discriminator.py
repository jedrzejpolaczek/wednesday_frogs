import keras
import tensorflow
from loguru import logger


# Local imports
from utils import get_json_data

# ---------------------
# --- DISCRIMINATOR ---
# ---------------------

def create_discriminator() -> tensorflow.keras.Model:
    """ 
    Create model of CNN image classifier.

    return (tensorflow.keras.Model): instation of untrained discriminator (CNN) model.
    """
    training_data = get_json_data('training_config.json')

    height = training_data["height"]
    width = training_data["width"]
    channels = training_data["channels"]

    # DISCRIMINATOR MODEL DECLARATION
    model = tensorflow.keras.Sequential()

    # DISCRIMINATOR MODEL DEFINITION
    # INPUT LAYER
    model.add(keras.Input(shape=(height, width, channels)))

    # HIDDEN LAYERS
    model.add(tensorflow.keras.layers.Conv2D(64, (3, 3), strides=(2, 2), padding='same'))
    model.add(tensorflow.keras.layers.LeakyReLU())

    model.add(tensorflow.keras.layers.Conv2D(128, (3, 3), strides=(2, 2), padding='same'))
    model.add(tensorflow.keras.layers.LeakyReLU())

    model.add(tensorflow.keras.layers.Conv2D(128, (3, 3), strides=(2, 2), padding='same'))
    model.add(tensorflow.keras.layers.LeakyReLU())

    model.add(tensorflow.keras.layers.Conv2D(256, (3, 3), strides=(2, 2), padding='same'))
    model.add(tensorflow.keras.layers.LeakyReLU())

    model.add(tensorflow.keras.layers.Dropout(0.4))
    model.add(tensorflow.keras.layers.Flatten())

    # OUTPUT Ltensorflow.keras.AYER
    model.add(tensorflow.keras.layers.Dense(1, activation='sigmoid'))

    # DISCRIMINATOR MODEL OPTIMIZATION
    # Optimization function is returning by function discriminator_optimizer. 
    # We will add it later when we will be putting everything together to create GAN.
    
    # DISCRIMINATOR MODEL COMPILATION
    # We will compile all models at once

    logger.debug(f"Discriminator network: \n {model.summary()}")

    return model


def get_discriminator_loss(
    real_output: tensorflow.Tensor, 
    fake_output: tensorflow.Tensor
) -> tensorflow.Tensor:
    """
    Calculate and return loss value for discriminator based on output 
    from discriminator for fake (generated by generator) and real discriminator output.

    real_output (tensorflow..Tensor): real output values from discriminator 
    contatining list with predictions and actuall values (eg. y_pred, y_true).
    fake_output (tensorflow..Tensor): fake output values from discriminator 
    contatining list with predictions and actuall values (eg. y_pred, y_true).

    return (tensorflow.Tensor): (actually EagerTensor) tensor with value of loss for fake output.
    """
    cross_entropy = tensorflow.keras.losses.BinaryCrossentropy(from_logits=True)

    real_loss = cross_entropy(tensorflow.ones_like(real_output), real_output)
    fake_loss = cross_entropy(tensorflow.zeros_like(fake_output), fake_output)
    total_loss = real_loss + fake_loss

    return total_loss


def get_discriminator_optimizer() -> tensorflow.keras.optimizers.Adam:
    """
    Return instation of optimizer Adam from tensorflow librarie.

    return (tensorflow.keras.optimizers.Adam): Optimizer Adam for generator network.
    """
    return tensorflow.keras.optimizers.Adam(1e-4)